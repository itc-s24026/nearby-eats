import { useState, useEffect } from "react";
import SearchBar from "@/components/SearchBar";
import RestaurantCard from "@/components/RestaurantCard";

interface Restaurant {
  place_id: string;
  name: string;
  vicinity: string;
  rating?: number;
  icon?: string;
}

export default function Home() {
  const [restaurants, setRestaurants] = useState<Restaurant[]>([]);
  const [favorites, setFavorites] = useState<Restaurant[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [location, setLocation] = useState<{ latitude: number; longitude: number } | null>(null);

  // „É≠„Éº„Ç´„É´„Çπ„Éà„É¨„Éº„Ç∏„Åã„Çâ„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÇíÂèñÂæó
  useEffect(() => {
    const storedFavorites = localStorage.getItem("favorites");
    if (storedFavorites) {
      setFavorites(JSON.parse(storedFavorites));
    }
  }, []);

  // ‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó
  useEffect(() => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          console.log("‰ΩçÁΩÆÊÉÖÂ†±ÂèñÂæóÊàêÂäü:", position.coords.latitude, position.coords.longitude);
          setLocation({
            latitude: position.coords.latitude,
            longitude: position.coords.longitude,
          });
        },
        (error) => {
          console.error("‰ΩçÁΩÆÊÉÖÂ†±„ÅÆÂèñÂæó„Å´Â§±Êïó„Åó„Åæ„Åó„Åü", error);
          setError("‰ΩçÁΩÆÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü");
        }
      );
    } else {
      setError("„Åä‰Ωø„ÅÑ„ÅÆ„Éñ„É©„Ç¶„Ç∂„ÅØ‰ΩçÁΩÆÊÉÖÂ†±„Çí„Çµ„Éù„Éº„Éà„Åó„Å¶„ÅÑ„Åæ„Åõ„Çì");
    }
  }, []);

  // Ê§úÁ¥¢Âá¶ÁêÜ
  const handleSearch = async (keyword: string) => {
    if (!keyword || !location) {
      setError("Ê§úÁ¥¢„ÉØ„Éº„Éâ„Åæ„Åü„ÅØ‰ΩçÁΩÆÊÉÖÂ†±„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Åæ„Åô");
      return;
    }

    setLoading(true);
    setError(null);

    try {
      const response = await fetch(
        `/api/search?keyword=${encodeURIComponent(keyword)}&latitude=${location.latitude}&longitude=${location.longitude}`
      );

      if (!response.ok) throw new Error("„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü");

      const data = await response.json();

      if (data.status === "OK") {
        setRestaurants(data.results as Restaurant[]);
      } else {
        setError("„Éá„Éº„Çø„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü");
      }
    } catch (error) {
      if (error instanceof Error) {
        setError(`„Ç®„É©„Éº: ${error.message}`);
      } else {
        setError("„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü");
      }
    } finally {
      setLoading(false);
    }
  };

  // „ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆËøΩÂä†/ÂâäÈô§
  const toggleFavorite = (restaurant: Restaurant) => {
    setFavorites((prevFavorites) => {
      const isAlreadyFavorite = prevFavorites.some((fav) => fav.place_id === restaurant.place_id);
      const updatedFavorites = isAlreadyFavorite
        ? prevFavorites.filter((fav) => fav.place_id !== restaurant.place_id)
        : [...prevFavorites, restaurant];

      return updatedFavorites;
    });
  };

  // `favorites` „ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ„Åó„Å¶ localStorage „Å´‰øùÂ≠ò
  useEffect(() => {
    localStorage.setItem("favorites", JSON.stringify(favorites));
  }, [favorites]);

  return (
    <div className="min-h-screen bg-gray-100 p-4">
      <h1 className="text-2xl font-bold text-center mb-4">Nearby Eats</h1>
      <SearchBar onSearch={handleSearch} />

      {loading && <p className="text-center">üîç Ê§úÁ¥¢‰∏≠...</p>}
      {error && <p className="text-center text-red-500">{error}</p>}

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
        {restaurants.map((restaurant) => (
          <RestaurantCard
            key={restaurant.place_id}
            restaurant={restaurant}
            isFavorite={favorites.some((fav) => fav.place_id === restaurant.place_id)}
            toggleFavorite={() => toggleFavorite(restaurant)}
          />
        ))}
      </div>
    </div>
  );
}
